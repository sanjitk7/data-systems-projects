# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CS598MP3

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DataFrame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataFrame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataFrame(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DataFrame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DataFrame
    def DfMetadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from CS598MP3.DataFrameMetadata import DataFrameMetadata
            obj = DataFrameMetadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataFrame
    def DfColumns(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CS598MP3.Column import Column
            obj = Column()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataFrame
    def DfColumnsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataFrame
    def DfColumnsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def DataFrameStart(builder):
    builder.StartObject(2)

def Start(builder):
    DataFrameStart(builder)

def DataFrameAddDfMetadata(builder, dfMetadata):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dfMetadata), 0)

def AddDfMetadata(builder, dfMetadata):
    DataFrameAddDfMetadata(builder, dfMetadata)

def DataFrameAddDfColumns(builder, dfColumns):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dfColumns), 0)

def AddDfColumns(builder, dfColumns):
    DataFrameAddDfColumns(builder, dfColumns)

def DataFrameStartDfColumnsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDfColumnsVector(builder, numElems):
    return DataFrameStartDfColumnsVector(builder, numElems)

def DataFrameEnd(builder):
    return builder.EndObject()

def End(builder):
    return DataFrameEnd(builder)
